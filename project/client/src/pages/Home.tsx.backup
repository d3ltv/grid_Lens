import { useAuth } from "@/_core/hooks/useAuth";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { APP_LOGO, APP_TITLE, getLoginUrl } from "@/const";
import { trpc } from "@/lib/trpc";
import { useState } from "react";
import { useLocation } from "wouter";
import { Plus, Film, LogOut } from "lucide-react";

export default function Home() {
  const { user, loading, isAuthenticated, logout } = useAuth();
  const [, setLocation] = useLocation();
  const [isDialogOpen, setIsDialogOpen] = useState(false);
  const [formData, setFormData] = useState({
    title: "",
    clientName: "",
    projectObjective: "",
    targetAudience: "",
    estimatedDuration: "",
    diffusionFormat: "",
  });

  const { data: projects = [], isLoading: projectsLoading } = trpc.project.list.useQuery(undefined, {
    enabled: isAuthenticated,
  });

  const createProjectMutation = trpc.project.create.useMutation({
    onSuccess: (newProject) => {
      setFormData({
        title: "",
        clientName: "",
        projectObjective: "",
        targetAudience: "",
        estimatedDuration: "",
        diffusionFormat: "",
      });
      setIsDialogOpen(false);
      setLocation(`/project/${newProject.id}`);
    },
  });

  const handleCreateProject = async () => {
    if (!formData.title.trim()) {
      alert("Le titre du projet est requis");
      return;
    }
    createProjectMutation.mutate(formData);
  };

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4"></div>
          <p>Chargement...</p>
        </div>
      </div>
    );
  }

  if (!isAuthenticated) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900 flex items-center justify-center">
        <div className="text-center max-w-md">
          <div className="mb-8">
            {APP_LOGO && <img src={APP_LOGO} alt={APP_TITLE} className="h-16 mx-auto mb-4" />}
            <h1 className="text-4xl font-bold text-white mb-2">{APP_TITLE}</h1>
            <p className="text-slate-400 text-lg">Outil professionnel de pré-production vidéo</p>
          </div>
          <p className="text-slate-300 mb-8">
            Créez des documents de pré-production complets et professionnels à envoyer à vos clients.
          </p>
          <Button
            onClick={() => {
              window.location.href = getLoginUrl();
            }}
            size="lg"
            className="bg-blue-600 hover:bg-blue-700"
          >
            Se connecter
          </Button>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-slate-50">
      {/* Header */}
      <div className="bg-white border-b border-slate-200 sticky top-0 z-50">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4 flex items-center justify-between">
          <div className="flex items-center gap-3">
            {APP_LOGO && <img src={APP_LOGO} alt={APP_TITLE} className="h-8" />}
            <h1 className="text-2xl font-bold text-slate-900">{APP_TITLE}</h1>
          </div>
          <div className="flex items-center gap-4">
            <span className="text-sm text-slate-600">
              Bienvenue, <strong>{user?.name}</strong>
            </span>
            <Button
              variant="ghost"
              size="sm"
              onClick={() => logout()}
              className="text-slate-600 hover:text-slate-900"
            >
              <LogOut className="w-4 h-4 mr-2" />
              Déconnexion
            </Button>
          </div>
        </div>
      </div>

      {/* Main Content */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
        {/* Section Header */}
        <div className="flex items-center justify-between mb-8">
          <div>
            <h2 className="text-3xl font-bold text-slate-900">Mes Projets</h2>
            <p className="text-slate-600 mt-2">Gérez vos projets de pré-production vidéo</p>
          </div>
          <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
            <DialogTrigger asChild>
              <Button className="bg-blue-600 hover:bg-blue-700">
                <Plus className="w-4 h-4 mr-2" />
                Nouveau Projet
              </Button>
            </DialogTrigger>
            <DialogContent className="max-w-2xl">
              <DialogHeader>
                <DialogTitle>Créer un nouveau projet</DialogTitle>
                <DialogDescription>
                  Remplissez les informations de base de votre projet de pré-production
                </DialogDescription>
              </DialogHeader>
              <div className="space-y-4 py-4">
                <div>
                  <Label htmlFor="title">Titre du projet *</Label>
                  <Input
                    id="title"
                    placeholder="Ex: Campagne publicitaire 2024"
                    value={formData.title}
                    onChange={(e) => setFormData({ ...formData, title: e.target.value })}
                  />
                </div>
                <div>
                  <Label htmlFor="clientName">Nom du client</Label>
                  <Input
                    id="clientName"
                    placeholder="Ex: Acme Corp"
                    value={formData.clientName}
                    onChange={(e) => setFormData({ ...formData, clientName: e.target.value })}
                  />
                </div>
                <div>
                  <Label htmlFor="projectObjective">Objectif du projet</Label>
                  <Textarea
                    id="projectObjective"
                    placeholder="Décrivez l'objectif principal du projet..."
                    value={formData.projectObjective}
                    onChange={(e) => setFormData({ ...formData, projectObjective: e.target.value })}
                  />
                </div>
                <div>
                  <Label htmlFor="targetAudience">Public cible</Label>
                  <Input
                    id="targetAudience"
                    placeholder="Ex: Femmes 25-45 ans, urbaines"
                    value={formData.targetAudience}
                    onChange={(e) => setFormData({ ...formData, targetAudience: e.target.value })}
                  />
                </div>
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <Label htmlFor="estimatedDuration">Durée estimée</Label>
                    <Input
                      id="estimatedDuration"
                      placeholder="Ex: 30 secondes"
                      value={formData.estimatedDuration}
                      onChange={(e) => setFormData({ ...formData, estimatedDuration: e.target.value })}
                    />
                  </div>
                  <div>
                    <Label htmlFor="diffusionFormat">Format de diffusion</Label>
                    <Input
                      id="diffusionFormat"
                      placeholder="Ex: Web, TV, Réseaux sociaux"
                      value={formData.diffusionFormat}
                      onChange={(e) => setFormData({ ...formData, diffusionFormat: e.target.value })}
                    />
                  </div>
                </div>
              </div>
              <div className="flex gap-3 justify-end">
                <Button
                  variant="outline"
                  onClick={() => setIsDialogOpen(false)}
                >
                  Annuler
                </Button>
                <Button
                  onClick={handleCreateProject}
                  disabled={createProjectMutation.isPending}
                  className="bg-blue-600 hover:bg-blue-700"
                >
                  {createProjectMutation.isPending ? "Création..." : "Créer le projet"}
                </Button>
              </div>
            </DialogContent>
          </Dialog>
        </div>

        {/* Projects Grid */}
        {projectsLoading ? (
          <div className="text-center py-12">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4"></div>
            <p>Chargement de vos projets...</p>
          </div>
        ) : projects.length === 0 ? (
          <Card className="border-dashed">
            <CardContent className="pt-12 pb-12 text-center">
              <Film className="w-16 h-16 text-slate-300 mx-auto mb-4" />
              <h3 className="text-lg font-semibold text-slate-900 mb-2">Aucun projet</h3>
              <p className="text-slate-600 mb-6">
                Commencez par créer votre premier projet de pré-production
              </p>
              <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
                <DialogTrigger asChild>
                  <Button className="bg-blue-600 hover:bg-blue-700">
                    <Plus className="w-4 h-4 mr-2" />
                    Créer un projet
                  </Button>
                </DialogTrigger>
              </Dialog>
            </CardContent>
          </Card>
        ) : (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {projects.map((project) => (
              <Card
                key={project.id}
                className="hover:shadow-lg transition-shadow cursor-pointer"
                onClick={() => setLocation(`/project/${project.id}`)}
              >
                <CardHeader>
                  <CardTitle className="line-clamp-2">{project.title}</CardTitle>
                  {project.clientName && (
                    <CardDescription>{project.clientName}</CardDescription>
                  )}
                </CardHeader>
                <CardContent>
                  <div className="space-y-2 text-sm text-slate-600">
                    {project.projectObjective && (
                      <p className="line-clamp-2">
                        <strong>Objectif :</strong> {project.projectObjective}
                      </p>
                    )}
                    {project.estimatedDuration && (
                      <p>
                        <strong>Durée :</strong> {project.estimatedDuration}
                      </p>
                    )}
                    {project.diffusionFormat && (
                      <p>
                        <strong>Format :</strong> {project.diffusionFormat}
                      </p>
                    )}
                  </div>
                  <div className="mt-4 pt-4 border-t border-slate-200">
                    {project.createdAt && (
                      <p className="text-xs text-slate-500">
                        Créé le {new Date(project.createdAt).toLocaleDateString("fr-FR")}
                      </p>
                    )}
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        )}
      </div>
    </div>
  );
}

